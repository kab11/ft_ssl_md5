# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    md5_notes.txt                                      :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: kblack <marvin@42.fr>                      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/04/01 20:42:08 by kblack            #+#    #+#              #
#    Updated: 2019/04/01 22:55:25 by kblack           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Cryptographic Hash Functions
-	mathmatical algorithm the mps data of arbitrary size to a bit string of a fixed size
-	one-way function: a function which is infeasible to invert
-	the message (input data)
-	the message digest (hash value/hash/output data)

5 Main Properties
1)	Deterministic, the same messgae always results in the same hash
2)	Quick to compute the hash value for any given message
3)	It is infeasible to generate a message from its digest except by trying all possible
	messages
4)	A small change to a message should change the hash value so exensively that the new
	hash value appears uncorreated with the old hash value
5)	It is infeasible to find 2 different messages with the same hash value

Focuses on bitwise operations, integer overflow, one-way functions, and writing
modular code

Utilizes md5 and sha256 hashing functions

MD5
-	is a cryptographic hash function "Message Digest 5"
-	can safely be sued as a checksum to verify data intergrity against unintentional corruption
Must include: 
	
	-p, echo STDIN to STDOUT and append the checksum to STDOUT
	-q, quiet mode
	-r, reverse the format of the output
	-s, print the sum of the given stringi

-	produces a 128-bit hash value 
-	fails when it comes to collison attacks (finding 2 inputs producing the same hash value)
-	input is broken up into 512-bit blocks (16 32-bit words) -> the message is padded so that
	the length is divisible by 512 (first a signle bit is appended to the end of the message
	followed by as many zeros as needed to bring the message to 64 buts fewer than a multiple of 512)
	-> the rest is filled with 64 bits representing the length of the original message 

SHA-256
-	is one function of the SHA (Secure Hash Algorithm) family
-	computed with 32-bit words 
Must include:

	-p, echo STDIN to STDOUT and append the checksum to STDOUT
	-q, quiet mode
	-r, reverse the format of the output
	-s, print the sum of the given string

BONUS:
SHA-512
-	computed with 64-bit words; virtually identical to SHA-256 but differs in shift amount
	additive constants, and number of rounds 

Rotate(A) = RotR28(A) XOR RotR34(A) XOR RotR39(A) 
Rotate(E) = RotR14(E) XOR RotR18(E) XOR RotR41(E)ï»¿


Whirlpool

-	takes in a string of any length as input an produces a fixed-length hash value
-	hashes are used for verification of message integrity i

Applications:
-	Verifying the integrity of messages and files
-	Signature generation and verification: create secure and efficient digital signature schemes
-	Password verification
-	Proof-of work
-	File or data identifier

HASH FUNCTION DESIGN
-	Merkle-Damgard Construction
	~ breaks up input up into a series of equal-sized blocks and operates on the in sequence using a 1-way
	  compression function
	~ resistant to collisions 
	~ the last block processed should be uambiguasly length padded; adding nonsense

-	concatenating output from multiple hash functions provides collision resistance 
-	older versions of Transport Layer Security (TLS) and Secure Sockets Layer (SSL)
	use concatenated MD5 and SHA-1 sums

Hash Functions Notes (MIT Notes)

-	Hash function: maps arbitrary strings of data to fixed length output in s deterministic, public,
	"random" manner 
-	SHA3 in dictionaries are not used because they are slow even though it satisfies collision resistance 
-	CR: collison resistance 
-	TCR: target collision resistance; infeasible given 'x', to find x' = x; given x its easy to get h(x); 
	weak collision resistance 
h is CR ==> h is TCR (but NOT in reverse)
h is OW ? h is CR, TCR

# Initialize hash values
# Initialize array of round constants
# Pre-processing (Padding)
	-	begin with the original message of length L bits
	-	append a single '1' bit
	-	append K '0' bits, where K is the minimun nmber >= 0 such that L + 1 + K + 64 is a multiple of 512
	-	append L as a 64-bit big endian integer, making the total post-processed length a multiple of 512 bits
# Process the message in successive 512-but chunks:
	-	break message into 512-bit chunks 
	-	for each chunk:
		~ extend the first 16 words into the remaining 48 words w[16...63] of the message schedule array
		~ initialize working variables to current hash value
		~ compression function main loop
		~ add the compressed chunck to the current hash value
	-	produce the final hash value (big-endian)